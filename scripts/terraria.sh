#!/bin/bash

# usage: startup.sh [--update]
#        --update: update the server to the latest version
# the script will create a tmux session named 'terraria'
# connection details are displayed in the 'ngrok' window
# the server will be running in the 'world' window

# dependencies: tmux, wget, unzip, curl, tar, ngrok
# requirements: .net at $DOTNET_ROOT
# .net installation instructions are displayed when running the server

# NOTE: this script is meant to be run inside a directory
# place the script in a 'terraria' directory to keep things organized
# world data are stored in the 'worlds' directory
# server data and config are stored in the 'tshock' directory
# executables are downloaded into the 'server' directory

# terraria
# ├── server            # generated by the script
# │   ├── bin
# │   ├── TShock.Server
# ├── tshock            # must be backed up
# │   ├── backups
# │   ├── config.json
# │   ├── logs
# │   ├── tshock.sqlite
# ├── startup.sh        # this script
# └── worlds            # must be backed up
#     ├── world1.wld
#     └── world2.wld

tshock=https://api.github.com/repos/Pryaxis/TShock/releases/latest
arch=arm64
port=7777

# Function to update the server
update_server() {
    echo "Checking for TShock updates..."

    # Fetch the latest release data from GitHub
    release_info=$(curl -s "$tshock")
    # Extract the download URL for the arm64 version
    download_url=$(echo "$release_info" | grep -oP \
    '"browser_download_url": "\K(.*?)(?=")' | grep "$arch")
    # Check if the download URL is empty
    if [ -z "$download_url" ]; then
        echo "No $arch release found."
        exit 1
    fi

    # Download the latest release
    echo "Downloading latest TShock release..."
    wget -q -O tshock_latest.zip "$download_url"
    unzip -q tshock_latest.zip

    # Set up server files
    echo "Updating server..."
    tar_file=$(ls | grep '\.tar$')
    rm -rf server && mkdir server
    tar -xf "$tar_file" -C server/
    rm tshock_latest.zip "$tar_file"
    echo "Update complete."
}

# Set the working directory to the directory of the script
cd "$(dirname "$0")"
export PATH=$PATH:$DOTNET_ROOT

# Check if the update flag is provided
if [ "$1" == "--update" ]; then
    update_server
fi

# List all .wld files
echo "Available Worlds:"
echo "0) Create new world"
cd worlds
declare -a worlds
i=1
for world in *.wld; do
    echo "$i) $(basename "$world" .wld | tr '_' ' ')"
    worlds[i]="$world"
    ((i++))
done
cd ..

# Prompt the user to select a world
read -p "Enter the number of the world to start: " world_number
selected_world=${worlds[world_number]}
# Check if the user wants to create a new world
if [ "$world_number" == "0" ]; then
    read -p "Enter the name of the new world: " world_name
    world_name=${world_name | tr ' ' '_'}
    selected_world="$world_name.wld"
    read -p "Enter the size of the new world (1-3): " world_size
    # Check if the user made a valid selection
    if [ "$world_size" -lt 1 ] || [ "$world_size" -gt 3 ]; then
        echo "Invalid world size selection."
        exit 1
    fi
fi

# Check if the user made a valid selection
if [ -z "$selected_world" ]; then
    echo "Invalid world selection."
    exit 1
fi
cmd="./server/TShock.Server -world worlds/$selected_world -port $port"
# Check if world size is specified
if [ "$world_size" ]; then
    cmd="$cmd -autocreate $world_size"
fi

# Check if the server is already running and kill it
if tmux has-session -t terraria 2>/dev/null; then
    echo "Server is already running. Killing session..."
    tmux kill-session -t terraria
fi
tmux new-session -d -s terraria # Create a new session named 'terraria'

# Create a new window with the world's name
tmux new-window -t terraria -n "world" "$cmd"
tmux new-window -t terraria -n "ngrok" "ngrok tcp $port"
echo "World server has been started."
