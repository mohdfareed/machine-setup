# Configuration: macOS
# =============================================================================

# diable login message
[ -f "$HOME/.hushlogin" ] || touch "$HOME/.hushlogin"

# load homebrew
eval "$(/opt/homebrew/bin/brew shellenv)" && brew_prefix="$(brew --prefix)"
fpath+=("$brew_prefix/share/zsh/site-functions")         # pure prompt
fpath+=("$brew_prefix/share/zsh-completions")            # completions
export PATH="$(brew --prefix python)/libexec/bin:$PATH"  # python
eval "$(pyenv init -)"                                   # pyenv
eval "$(pyenv virtualenv-init -)"                        # pyenv-virtualenv

# zsh plugins
plugins=(
    macos # macos-specific utilities
)

# shell config, syntax highlighting, auto-suggestions, and auto-completion
source $MACHINE/config/zshrc
source "$brew_prefix/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
source "$brew_prefix/share/zsh-autosuggestions/zsh-autosuggestions.zsh"
unset brew_prefix

# Functions and Aliases
# =============================================================================

alias docker-restart='colima stop && colima start'
alias sys-update='brew update && brew upgrade && mas upgrade && brew cleanup'
alias ssh-create-key="ssh-keygen -t ed25519 -C"

# add all ssh keys to keychain
function ssh-fix-keychain {
    for private_key in ~/.ssh/*.key; do
        ssh-add --apple-use-keychain "$private_key"
    done
}

# ssh into raspberry pi
function ssh-pi {
    usage="usage: $0 [local]"
    if (($# > 1)); then echo $usage && return 1; fi

    if [ "$1" = "" ]; then
        ssh raspberrypi
    elif [ "$1" = "local" ]; then
        ssh raspberrypi.local
    else
        echo $usage
        return 1
    fi
}

# uninstall homebrew package with its dependencies
function brew-uninstall {
    usage="usage: $0 package..."
	if (($# < 1)); then echo $usage && return 1; fi

    brew uninstall $@
    brew autoremove
    brew cleanup
}

# zip a folder with password without compression
function zip-encrypt {
    usage="usage: $0 dir"
	if (($# != 1)); then echo $usage && return 1; fi

    if [[ ! -d "$1" ]]; then
        echo "'$1' is not a directory"
        return 1
    fi

    cd "$1"
    dir_name=${PWD##*/}
    zip -er0 "$dir_name.zip" . -x ".DS_Store" -x "._*"
    mv "$dir_name.zip" ..
    cd - >/dev/null
}

# unzip a folder with password
function unzip-encrypt {
    usage="usage: $0 file"
    if (($# != 1)); then echo $usage && return 1; fi

    if [[ ! -f "$1" ]]; then
        echo "'$1' is not a file"
        return 1
    fi

    unzip -P $(openssl rand -base64 32 | tr -d /=+) "$1"
}

# Post-Configuration
# =============================================================================

ssh-fix-keychain
