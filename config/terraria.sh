#!/bin/bash

# usage: startup.sh [--update]
# the script will create a tmux session named 'terraria'
# each world will be a separate window in the session
# updating the server will kill the session

# dependencies: tmux, wget, unzip, curl, tar
# requirements: .net at $DOTNET_ROOT
# .net installation intructions are displayed when running the server

# NOTE: this script is meant to be run inside a directory
# place the script in a 'terraria' directory to keep things organized
# world data are stored in the 'worlds' directory
# server data and config are stored in the 'tshock' directory
# executables are downloaded into the 'server' directory

# terraria
# ├── server            # generated by the script
# │   ├── bin
# │   ├── TShock.Server
# ├── tshock            # must be backed up
# │   ├── backups
# │   ├── config.json
# │   ├── logs
# │   ├── tshock.sqlite
# ├── startup.sh        # this script
# └── worlds            # must be backed up
#     ├── world1.wld
#     └── world2.wld

tshock=https://api.github.com/repos/Pryaxis/TShock/releases/latest
arch=arm64

# Function to update the server
update_server() {
    echo "Checking for TShock updates..."

    # Fetch the latest release data from GitHub
    release_info=$(curl -s "$tshock")
    # Extract the download URL for the arm64 version
    download_url=$(echo "$release_info" | grep -oP \
    '"browser_download_url": "\K(.*?)(?=")' | grep "$arch")
    # Check if the download URL is empty
    if [ -z "$download_url" ]; then
        echo "No $arch release found."
        exit 1
    fi

    # Download the latest release
    echo "Downloading latest TShock release..."
    wget -q -O tshock_latest.zip "$download_url"
    unzip -q tshock_latest.zip

    # Setting up server files
    echo "Updating server..."
    tar_file=$(ls | grep '\.tar$')
    rm -rf server && mkdir server
    tar -xf "$tar_file" -C server/

    # Clean up
    rm tshock_latest.zip "$tar_file"
    echo "Update complete."
}

# Set the working directory to the directory of the script
cd "$(dirname "$0")"
export PATH=$PATH:$DOTNET_ROOT

# Check if the update flag is provided
if [ "$1" == "--update" ]; then
    update_server
    # remove terraria tmux session
    echo "Killing all running worlds..."
    tmux kill-session -t terraria
fi

# List all .wld files
echo "Available Worlds:"
cd worlds
declare -a worlds
i=1
for world in *.wld; do
    echo "$i) $world"
    worlds[i]="$world"
    ((i++))
done
cd ..

# Prompt the user to select a world
read -p "Enter the number of the world to select: " world_number
selected_world=${worlds[world_number]}
# Check if the user made a valid selection
if [ -z "$selected_world" ]; then
    echo "Invalid selection."
    exit 1
fi
# Extract the base name of the world for the tmux window name
world_name=$(basename "$selected_world" .wld)

# Create a new session named 'terraria' if it doesn't exist
tmux has-session -t terraria 2>/dev/null || tmux new-session -d -s terraria
# Check if a window with the world name already exists and kill it
if tmux list-windows -t terraria | grep -q "$world_name"; then
    echo "Killing existing world..."
    tmux kill-window -t "terraria:$world_name"
fi

# Create a new window with the world's name
cmd="./server/TShock.Server -world worlds/$selected_world"
cd .. && tmux new-window -t terraria -n "$world_name" "$cmd"
echo "World '$world_name' has been started."
